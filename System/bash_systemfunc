# PATH

alias vim='nvim'

export PATH=$PATH:/home/$USER/.bin

function p() {
        echo $PATH
}

function us_date() {
	TZ=US/Central date
}

function ist() {
	TZ=Asia/Kolkata date
}

function delete_empty_directories() {
	find ~/Downloads/ -empty -type d -delete
}

# PATH on Request

function unbrew() {
        PATH=$(echo $PATH | sed -e 's;/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:;;g')
	echo "Removed brew from PATH"
        echo $PATH
}

function setbrew() {
        eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
	echo "Added brew to PATH"
        echo $PATH
}

function pset_rust() {
	export PATH="$HOME/.cargo/bin:$PATH"
	case "$1" in
		nightly)
			unlink ~/.cargo
			ln -s ~/.cargo-nightly ~/.cargo
			;;
		stable)
			unlink ~/.cargo
			ln -s ~/.cargo-stable ~/.cargo
			;;
			
		*)
			echo "enter one of the following"
			echo "$ setp_rust nightly"
			echo "$ setp_rust stable"
			#echo "$ setp_rust apath #activate path"
			;;
	esac
}

function setgo() {
	export PATH=$PATH:/usr/local/go/bin
	echo $PATH
}



function setemscripten() {
	EMSCRIPTENPATHS=/home/navin/Software/emsdk:/home/navin/Software/emsdk/fastcomp/emscripten:/home/navin/Software/emsdk/node/12.9.1_64bit/bin
	export PATH=$PATH:${EMSCRIPTENPATHS}
}

function unemscripten() {
        PATH=$(echo $PATH | sed -e 's;:/home/navin/Software/emsdk:/home/navin/Software/emsdk/fastcomp/emscripten:/home/navin/Software/emsdk/node/12.9.1_64bit/bin;;g')
	echo $PATH
}

function go_install() {
if [ -z "$1" ]
        then echo "specify tar downloaded from https://golang.org/ as argument"
else
        sudo tar -C /usr/local -xzf "$1"
fi
}

function laptop_keyboard_led_toggle() {
	currentVal="$(sudo cat /sys/class/leds/asus\:\:kbd_backlight/brightness)"
	#echo "current Value: ${currentVal}" 
	if [ $currentVal -eq 3 ]
		then  echo 0 | sudo tee /sys/class/leds/asus\:\:kbd_backlight/brightness
	else
		echo 3 | sudo tee /sys/class/leds/asus\:\:kbd_backlight/brightness
	fi
}

# JDK

function jdk() {
	case "$1" in
		8)
			export JAVA_HOME="/opt/jdk/jdk1.8.0_161/"       
			echo "JAVA_HOME=${JAVA_HOME}"
			;;
		11)
			export JAVA_HOME="/opt/jdk/jdk-11/"
			echo "JAVA_HOME=${JAVA_HOME}"
			;;
		graal)
			export JAVA_HOME="/opt/jdk/graal"
			echo "JAVA_HOME=${JAVA_HOME}"
			;;
		*)
			echo "enter one of the following options as a parameter:"
			echo "8 for oracle jdk 8"
			echo "11 for openjdk 11"
			echo "graal for graalvm"
			;;
	esac
}

# AWS Credentials

function aws-creds() {
	case "$1" in
		p*)
			unlink ~/.aws
			ln -s ~/.aws-personal ~/.aws
			creds=($(cat ~/.aws-personal/credentials | cut -d '=' -f 2 | sed -r 's;\s+;;g' | tr '\n' ' ' ))
			export AWS_ACCESS_KEY_ID=${creds[1]}
			echo "Exporting AWS_ACCESS_KEY_ID=${creds[1]}"
			export AWS_SECRET_ACCESS_KEY=${creds[2]}
			echo "Exporting AWS_SECRET_ACCESS_KEY=<redacted>"
			echo "set to use personal AWS account"
			;;
		w*)
			unlink ~/.aws
			ln -s ~/.aws-work ~/.aws
			creds=($(cat ~/.aws-work/credentials | cut -d '=' -f 2 | sed -r 's;\s+;;g' | tr '\n' ' ' ))
			export AWS_ACCESS_KEY_ID=${creds[1]}
			echo "Exporting AWS_ACCESS_KEY_ID=${creds[1]}"
			export AWS_SECRET_ACCESS_KEY=${creds[2]}
			echo "Exporting AWS_SECRET_ACCESS_KEY=<redacted>"
			echo "set to use work AWS account"
			;;
		*)
			echo "enter one of the following"	
			echo "personal for personal aws account"
			echo "work for work aws account"
			ls -la ~/.aws
			;;
	esac
}



# SSH Config

function ssh-config() {
	case "$1" in
		p*)
			unlink ~/.ssh/config
			ln -s ~/.ssh/personal-config ~/.ssh/config
			echo $(ls -la ~/.ssh/config)
			;;
		*)
			echo "enter either personal or av as argument"
			ls -la ~/.ssh/config
			;;
	esac
}

# Android SDK

function android_paths() {
	export ANDROID_HOME=~/Software/Android/Sdk
	export PATH=$PATH:$ANDROID_HOME/tools
	export PATH=$PATH:$ANDROID_HOME/tools/bin
	export PATH=$PATH:$ANDROID_HOME/emulator
	export PATH=$PATH:$ANDROID_HOME/platform-tools
	export PATH=$PATH:$ANDROID_HOME/platform-tools/bin
}

# Flatpak
function octave() {
	flatpak run org.octave.Octave
}
