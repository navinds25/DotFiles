#!/bin/bash

CONTAINER_RUNTIME="podman"
MY_CONTAINERS=(NAMES bot gogs)

#HELPER FUNCTIONS:

containsElement () {
  #For checking if element exists in an array
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

#COLORS:
#Black       0;30     Dark Gray     1;30
#Blue        0;34     Light Blue    1;34
#Green       0;32     Light Green   1;32
#Cyan        0;36     Light Cyan    1;36
#Red         0;31     Light Red     1;31
#Purple      0;35     Light Purple  1;35
#Brown       0;33     Yellow        1;33
#Light Gray  0;37     White         1;37
#NO COLOR \033[0m

# \033[0;36m dfunc line:DOCKER FUNCTIONS:

function containerfunc() {
    #Lists Docker Functions Available:
    local dockerfunc help_docker_func
    dockerfunc=~/Infrastructure/DotFiles/Containers/bash_containerfunc
    help_docker_func=$(grep -A1 -e "function" -e "dfunc line:" < "$dockerfunc"| sed 's/dfunc line://g' | sed 's/#//g' |grep -v "dfunc: ignore line"); #dfunc: ignore line
    echo -e "$help_docker_func" #dfunc: ignore line
    echo -e "\033[0m"
}

function dcleanup_img_dang() {
    #Cleanup dangling images,
    #volumes, etc.
    "${CONTAINER_RUNTIME}" rmi $("${CONTAINER_RUNTIME}" images -aq -f dangling=true)
}

function dcleanall_cont() {
    #For Deleting all containers
    local containers
    containers=($("${CONTAINER_RUNTIME}" ps -aq 2>/dev/null))
    echo "${containers[*]}"
    "${CONTAINER_RUNTIME}" rm -v "${containers[*]}" 2>/dev/null
}

function dstop() {
    #Stop running containers
    local containers
    containers=($("${CONTAINER_RUNTIME}" ps | awk -F' ' '{print $NF}'))
    echo "Running container ""${containers[*]}"
    echo "Skipping container ""${MY_CONTAINERS[*]}"
    for i in "${containers[@]}"; do
        containsElement "$i" "${MY_CONTAINERS[@]}"
        if [ "$?" == 1 ]; then
            "${CONTAINER_RUNTIME}" stop "$i" 2>/dev/null;
        fi
        done
}

function dcleanupc() {
    #For Deleting selected containers by name & dangling images
    local containers
    dstop
    dcleanup_img_dang
    containers=($("${CONTAINER_RUNTIME}" ps -a | awk -F' ' '{print $NF}'))
    echo "container ""${containers[*]}"
    echo "Skipping container ""${MY_CONTAINERS[*]}"
    for i in "${containers[@]}"; do
        containsElement "$i" "${MY_CONTAINERS[@]}"
        if [ "$?" == 1 ]; then
            "${CONTAINER_RUNTIME}" rm -v "$i" 2>/dev/null;
        fi
        done
}

function dip() {
    #Get ip for running containers:
    local container containers ip
    if [ -z "$1" ]
    then
        containers=($("${CONTAINER_RUNTIME}" ps | awk -F' ' '{print $NF}'))
        for i in "${containers[@]}"; do
            if [ "$i" != "NAMES" ]; then
            ip=$("${CONTAINER_RUNTIME}" inspect -f '{{.Name}} - {{.NetworkSettings.IPAddress }}' "$i")
            echo "$i" "$ip"
            fi
        done
    else
        container="$1"
        ip=$("${CONTAINER_RUNTIME}" inspect -f '{{.Name}} - {{.NetworkSettings.IPAddress }}' "$container")
        echo "$container" "$ip"
    fi
}

function dinspect() {
    # Provides "${CONTAINER_RUNTIME}" inspect with ncurses WIP
    local containers container
    if [ -z "$1" ]
    then
        echo "No container specified"
    else
        container="$1"
        "${CONTAINER_RUNTIME}" inspect "$container" 2>/dev/null
        main container
    fi
}

function dc_trace_cmd() {
    #Gives the Dockerfile CMD param from the "${CONTAINER_RUNTIME}" image.
    local parent=`"${CONTAINER_RUNTIME}" inspect -f '{{ .Parent }}' $1` 2>/dev/null
    declare -i level=$2
    echo ${level}: `"${CONTAINER_RUNTIME}" inspect -f '{{ .ContainerConfig.Cmd }}' $1 2>/dev/null`
    level=level+1
    if [ "${parent}" != "" ]; then
      echo ${level}: $parent 
      dc_trace_cmd $parent $level
    fi
}

#\033[0;32m dfunc line:  RUN FUNCTIONS:

function container_firefox() {
    "${CONTAINER_RUNTIME}" run -it --rm --name firefox -e DISPLAY="$DISPLAY" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/shm:/dev/shm navinds25/firefox:v1
}

function fq() {
    "${CONTAINER_RUNTIME}" run -it -u 0 --rm --name fq -e DISPLAY="$DISPLAY" -v /tmp/.X11-unix:/tmp/.X11-unix -v /dev/shm:/dev/shm fq
}

function pulseaudio_jess() {
    "${CONTAINER_RUNTIME}" run -it --rm -v /etc/localtime:/etc/localtime:ro --device /dev/snd --name pulseaudio -p 4713:4713 -v /var/run/dbus:/var/run/dbus \
 -v /etc/machine-id:/etc/machine-id --name pulseaudio pulseaudio
}

function atom_jess() {
    "${CONTAINER_RUNTIME}" run --rm -v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY="$DISPLAY" jess-atom
}

function dtor() {
    # This starts (dperson) tor on "${CONTAINER_RUNTIME}" [name=dptor]. -no portforwarding.
    "${CONTAINER_RUNTIME}" run --rm-d --name=dptor docker.io/dperson/torproxy
    dip dptor
}

function bot() {
    # This starts hangouts bot
    "${CONTAINER_RUNTIME}" run -it --name bot --restart always bot_image2
}

function rbot() {
    # Restarts bot
    "${CONTAINER_RUNTIME}" restart bot
}

function dtorrent() {
    # Starts jpillora/cloud-torrent image for downloading torrents
    "${CONTAINER_RUNTIME}" run -it --name torrent -v /var/docker/cloud-torrent/downloads:/downloads jpillora/cloud-torrent
}

function xbmc-server() {
    # Starts xbmc server from jonase/docker-xbmc-server
    "${CONTAINER_RUNTIME}" run -it --name xbmc-server --net=host -v /var/docker/xbmc-server/kodi-server/share/kodi/portable_data:/opt/kodi-server/share/kodi/portable_data jonase/docker-xbmc-server
}

function es() {
    # Starts elasticsearch image
    "${CONTAINER_RUNTIME}" run -d --name es -h elasticsearch -m 4g elasticsearch
    sleep 30
    "${CONTAINER_RUNTIME}" run -d --link es --name kibana -h kibana kibana
}

